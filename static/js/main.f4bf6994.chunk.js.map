{"version":3,"sources":["api/api.js","redux/recipesReducer.js","redux/recipeReducer.js","redux/articlesReducer.js","redux/articleReducer.js","redux/categoriesReducer.js","redux/reduxStore.js","Components/Menu/MenuCont.jsx","Components/Categories/Categories.jsx","Components/Categories/CategoriesContainer.jsx","Components/FormsControl/FormsControl.jsx","Validators/Validators.js","Components/Categories/AddCategories.jsx","Components/Categories/AddCategoreisContainer.jsx","Components/Categories/CategoryEditForm.jsx","Components/Categories/Category.jsx","Components/Categories/CategoryContainer.jsx","Components/Recipes/Recipes.jsx","Components/Recipes/RecipesContainer.jsx","Components/Recipes/AddRecipe.jsx","Components/Recipes/AddRecipeContainer.jsx","Components/Recipes/RecipeEditForm.jsx","Components/Recipes/Recipe.jsx","Components/Recipes/RecipeContainer.jsx","Components/Articles/Articles.jsx","Components/Articles/ArticlesContainer.jsx","Components/Articles/AddArticle.jsx","Components/Articles/AddArticleContainer.jsx","Components/Articles/ArticleEditForm.jsx","Components/Articles/Article.jsx","Components/Articles/ArticleContainer.jsx","App.jsx","index.jsx"],"names":["server","initialState","recipes","getRecipesTC","dispatch","axios","then","response","type","getRecipes","data","setRecipeTC","title","text","categoryId","JSON","stringify","headers","setRecipeAPI","recipesReducer","state","action","recipe","categoryList","initFormRecipe","getRecipeTC","id","getRecipeAPI","getRecipe","updateRecipeTC","obj","updateRecipeAPI","_id","delResipeTC","delRecipeAPI","getCategoryListTC","getCategoryListAPI","recipeReducer","articles","getArticlesTC","getArticles","setArticleTC","description","setArticleAPI","articlesReducer","article","initFormArticle","getArticleTC","getArticleAPI","getArticle","updateArticleTC","updateArticleAPI","delArticleAPI","getCategoryArticleListAPI","articleReducer","categories","recipeByCategory","parentsCategory","articlesCategory","initFormCategory","getCategoriesTC","a","getCategories","addCategoryTC","parentId","addCategoryAPI","delCategoryTC","delCategoryAPI","updateCategoryTC","updateCategoryAPI","getRecipeByCategoryTC","getRecipeByCategoryAPI","getCategoryParentsAPI","getArticleByCategoryTC","getArticleByCategoryAPI","categoriesReducer","reducers","combineReducers","recipesPage","recipePage","articlesPage","articlePage","categoriesPage","form","formReducer","store","createStore","applyMiddleware","thunkMiddleware","window","MenuCont","className","to","Categories","props","showCategories","map","e","key","CategoriesContainer","this","React","Component","connect","Input","input","meta","touched","error","TextArea","cols","rows","Select","required","value","minTitle","length","minText","ReduxAddCategoriesForm","reduxForm","onSubmit","handleSubmit","Field","name","placeholder","component","validate","AddCategories","useState","addDone","setEditMode","formData","Category","parents","c","status","setStatus","editMode","initialValues","updatedAt","onClick","initFormCategoryAC","CategoryContainer","findInfoCategory","category","filter","match","params","idCat","setState","getFullCategoryInformationTC","WithUrlCategoryContainer","withRouter","Recipes","showRecipes","RecipesContainer","ReduxAddRecipeForm","AddRecipe","editFormRecipePage","Recipe","RecipeEditForm","date","createObj","loadAC","RecipeContainer","recipeId","refreshRecipe","prevProps","prevState","snapshot","WithUrlRecipe","Articles","showArticles","ArticlesContainer","ReduxAddArticleForm","AddArticle","Article","ArticleEditForm","initFormArticleAC","ArticleContainer","articleId","refreshArticle","WithUrlArticle","App","exact","path","render","AppContainer","AppConnect","AdminPanel","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.f4bf6994.chunk.js","sourcesContent":["import * as axios from 'axios'\n\nconst server = 'https://test-task-server.herokuapp.com/'\n\n\n// --------------------------RECIPES---------------------------\n// --------------------------RECIPES---------------------------\n\n// ------------------------ Get recipes --------------------\nexport const getRecipesAPI = () => {\n   return  axios.get(`${server}api/v1/recipe/all`)\n}\n\n// ------------------------- Get recipe -------------------------\nexport const getRecipeAPI = (id) => {\n   return axios.get(`${server}api/v1/recipe/item/${id}`)\n}\n\n// ----------------------- Add recipe --------------------\nexport const setRecipeAPI = (title, text, categoryId) => {\n   let data = JSON.stringify({title, text, categoryId})\n   return axios.post(`${server}api/v1/recipe/create`, data, {\n      headers: { 'content-type': 'application/json' }\n   })\n}\n\n// ------------------------- Update recipe  -------------------------\nexport const updateRecipeAPI = (obj) => {\n   let data = JSON.stringify(obj)\n   return axios.put(`${server}api/v1/recipe/update`, data, {\n      headers: { 'content-type': 'application/json' }\n   })\n}\n\n// ------------------------- Delete recipe  -------------------------\nexport const delRecipeAPI = (id) => {\n   return axios.delete(`${server}api/v1/recipe/${id}`, {\n      headers: { 'content-type': 'application/json' }\n   })\n}\n\n// ------------------------- Get Category List -------------------------\nexport const getCategoryListAPI = (id) => {\n   return axios.get(`${server}api/v1/recipe/categoryList/${id}`)\n\n}\n\n\n// --------------------------CATEGORIES---------------------------\n// --------------------------CATEGORIES---------------------------\n\n// ------------------------- Get all categories  -----------------------\nexport const getCategoriesAPI = () => {\n   return  axios.get(`${server}api/v1/category/all`)\n}\n\n// ------------------------- Add category  -------------------------\nexport const addCategoryAPI = (title, parentId) => {\n   let data = JSON.stringify({title, parentId})\n   return axios.post(`${server}api/v1/category/create`, data, {\n      headers: { 'content-type': 'application/json' }\n   })\n}\n\n// ------------------------- Delete category  -------------------------\nexport const delCategoryAPI = (categoryId) => {\n   return axios.delete(`${server}api/v1/category/${categoryId}`)\n}\n\n// ------------------------- Update category  -------------------------\nexport const updateCategoryAPI = (data) => {\n   return axios.put(`${server}api/v1/category/update`, data, {\n      headers: { 'content-type': 'application/json' }\n   })\n}\n\n// -------------------- Get recipe by category ------------------------\nexport const getRecipeByCategoryAPI = (categoryId) => {\n   return  axios.get(`${server}api/v1/recipe/byCategory/${categoryId}`)\n}\n\n// -------------------- Get parents Category ------------------------\nexport const getCategoryParentsAPI = (categoryId) => {\n   return  axios.get(`${server}api/v1/category/categoryList/${categoryId}`)\n}\n\n// -------------------- Get articles Category ------------------------\nexport const getArticleByCategoryAPI = (categoryId) => {\n   return  axios.get(`${server}api/v1/article/byCategory/${categoryId}`)\n}\n\n\n// --------------------------ARTICLES---------------------------\n// --------------------------ARTICLES---------------------------\n\n// ------------------------ Get articles --------------------\nexport const getArticlesAPI = () => {\n   return  axios.get(`${server}api/v1/article/all`)\n}\n\n// ------------------------- Get article -------------------------\nexport const getArticleAPI = (id) => {\n   return axios.get(`${server}api/v1/article/item/${id}`)\n}\n\n// ----------------------- Add article --------------------\nexport const setArticleAPI = (title, description, text, categoryId) => {\n   let data = JSON.stringify({title, description, text, categoryId})\n   return axios.post(`${server}api/v1/article/create`, data, {\n      headers: { 'content-type': 'application/json' }\n   })\n}\n\n// ------------------------- Update article  -------------------------\nexport const updateArticleAPI = (obj) => {\n   let data = JSON.stringify(obj)\n   return axios.put(`${server}api/v1/article/update`, data, {\n      headers: { 'content-type': 'application/json' }\n   })\n}\n\n// ------------------------- Delete article  -------------------------\nexport const delArticleAPI = (id) => {\n   return axios.delete(`${server}api/v1/article/${id}`, {\n      headers: { 'content-type': 'application/json' }\n   })\n}\n\n// ------------------------- Get Category List -------------------------\nexport const getCategoryArticleListAPI = (id) => {\n   return axios.get(`${server}api/v1/article/categoryList/${id}`)\n}\n","import {getRecipesAPI, setRecipeAPI} from './../api/api'\n\nconst GET_RECIPES = 'GET_RECIPES'\n\nlet initialState = {\n   recipes: []\n};\n\nconst recipesReducer = (state = initialState, action) => {\n   switch(action.type) {\n      case GET_RECIPES:\n         return {\n            ...state,\n            recipes: action.getRecipes\n         }\n\n      default:\n         return state;\n   }\n}\n\n// ------------------------- Action Creators -------------------------\n// ------------------------- Get categories -------------------------\nconst getRecipesAC = (getRecipes) => ({\n   type: GET_RECIPES,\n   getRecipes\n})\n\n\n// ------------------------- Thunk Creators  -------------------------\nexport const getRecipesTC = () =>{\n   return (dispatch) => {\n      getRecipesAPI()\n      .then((response) => {dispatch(getRecipesAC(response.data))})\n   }\n}\n\nexport const setRecipeTC = (title, text, categoryId) => {\n   return (dispatch) => {\n      setRecipeAPI(title, text, categoryId)\n      .then(() => {dispatch(getRecipesTC())\n      })\n   }\n}\n\n\n// export const setRecipeTC = (title, text, categoryId) => async (dispatch) => {\n//       let response = await setRecipeAPI(title, text, categoryId)\n//       dispatch(getRecipesTC())\n// }\n\nexport default recipesReducer;\n","import {\n   getRecipeAPI,\n   updateRecipeAPI,\n   delRecipeAPI,\n   getCategoryListAPI\n} from './../api/api'\nimport {getRecipesTC} from \"./recipesReducer\"\n\nconst GET_RECIPE = 'GET_RECIPE'\nconst GET_CATEGORY_LIST = 'GET_CATEGORY_LIST'\nconst GET_DEFAULT_VALUE = \"GET_DEFAULT_VALUE\"\n\nlet initialState = {\n   recipe: [],\n   categoryList: [],\n   initFormRecipe: {}\n   \n};\n\nconst recipeReducer = (state = initialState, action) => {\n   \n   switch(action.type) {\n      case GET_RECIPE:\n         return {\n            ...state,\n            recipe: action.getRecipe\n         }\n\n         case GET_CATEGORY_LIST:\n            return {\n               ...state,\n               categoryList: action.categoryList\n            }\n         \n         case GET_DEFAULT_VALUE:\n            return {               \n               ...state,\n               initFormRecipe: action.data\n            }  \n      default:\n         return state;\n   }\n}\n\n// ------------------------- Action Creators -------------------------\n\nexport const loadAC = data => {\n   return ({ type: GET_DEFAULT_VALUE, data })\n}\n// ------------------------- Get recipe -------------------------\nconst getRecipeAC = (getRecipe) => ({\n   type: GET_RECIPE,\n   getRecipe\n})\n\n// ------------------------- Get Category List -------------------------\n\nconst getCategoryListAC = (categoryList) => ({\n   type: GET_CATEGORY_LIST,\n   categoryList\n})\n\n\n\n// ------------------------- Thunk Creators  -------------------------\n// ------------------------- Get recipe -------------------------\nexport const getRecipeTC = (id) =>{\n   return (dispatch) => {\n      getRecipeAPI(id)\n      .then((response) => {\n         dispatch(getRecipeAC(response.data))\n      })\n   }\n}\n\n// ------------------------- Update recipe -------------------------\n\nexport const updateRecipeTC = (obj) =>{\n   return (dispatch) => {\n      updateRecipeAPI(obj)\n      .then((response) => {\n         dispatch(getRecipeTC(response.data._id))\n      })\n   }\n}\n\n// ------------------------- Delete recipe -------------------------\n\nexport const delResipeTC = (id) =>{\n   return (dispatch) => {\n      delRecipeAPI(id)\n      .then(() => {\n         dispatch(getRecipesTC())\n      })\n   }\n}\n\n// ------------------------- Get Category List -------------------------\nexport const getCategoryListTC = (id) =>{\n   return (dispatch) => {\n      getCategoryListAPI(id)\n      .then((response) => {\n         dispatch(getCategoryListAC(response.data))\n      })\n   }\n}\n\n\n\n\nexport default recipeReducer;\n","import {getArticlesAPI, setArticleAPI} from './../api/api'\n\nconst GET_ARTICLES = 'GET_ARTICLES'\n\nlet initialState = {\n   articles: []\n};\n\nconst articlesReducer = (state = initialState, action) => {\n   switch(action.type) {\n      case GET_ARTICLES:\n         return {\n            ...state,\n            articles: action.getArticles\n         }\n\n      default:\n         return state;\n   }\n}\n\n// ------------------------- Action Creators -------------------------\n// ------------------------- Get categories -------------------------\nconst getArticlesAC = (getArticles) => ({\n   type: GET_ARTICLES,\n   getArticles\n})\n\n\n// ------------------------- Thunk Creators  -------------------------\nexport const getArticlesTC = () =>{\n   return (dispatch) => {\n      getArticlesAPI()\n      .then((response) => {dispatch(getArticlesAC(response.data))})\n   }\n}\n\nexport const setArticleTC = (title, description, text, categoryId) => {\n   return (dispatch) => {\n      setArticleAPI(title, description, text, categoryId)\n      .then(() => {dispatch(getArticlesTC())\n      })\n   }\n}\n\nexport default articlesReducer;\n","import {\n   getArticleAPI,\n   updateArticleAPI,\n   delArticleAPI,\n   getCategoryArticleListAPI\n} from './../api/api'\nimport {getArticlesTC} from \"./articlesReducer\"\n\nconst GET_ARTICLE = 'GET_ARTICLE'\nconst GET_CATEGORY_LIST = 'GET_CATEGORY_LIST'\nconst INIT_ARICLE_VALUE = \"INIT_ARICLE_VALUE\"\n\nlet initialState = {\n   article: [],\n   categoryList: [],\n   initFormArticle: {}\n};\n\nconst articleReducer = (state = initialState, action) => {\n   switch(action.type) {\n      case GET_ARTICLE:\n         return {\n            ...state,\n            article: action.getArticle\n         }\n\n         case GET_CATEGORY_LIST:\n            return {\n               ...state,\n               categoryList: action.categoryList\n            }\n\n         case INIT_ARICLE_VALUE:\n            return {\n               ...state,\n               initFormArticle: action.data\n            }\n\n      default:\n         return state;\n   }\n}\n\n// ------------------------- Action Creators -------------------------\n\nexport const initFormArticleAC = data => {\n   return ({ type: INIT_ARICLE_VALUE, data })\n}\n// ------------------------- Get article -------------------------\nconst getArticleAC = (getArticle) => ({\n   type: GET_ARTICLE,\n   getArticle\n})\n\n// ------------------------- Get Category List -------------------------\n\nconst getCategoryListAC = (categoryList) => ({\n   type: GET_CATEGORY_LIST,\n   categoryList\n})\n\n\n\n// ------------------------- Thunk Creators  -------------------------\n// ------------------------- Get article -------------------------\nexport const getArticleTC = (id) =>{\n   return (dispatch) => {\n      getArticleAPI(id)\n      .then((response) => {\n         dispatch(getArticleAC(response.data))\n      })\n   }\n}\n\n// ------------------------- Update article -------------------------\n\nexport const updateArticleTC = (obj) =>{\n   return (dispatch) => {\n      updateArticleAPI(obj)\n      .then((response) => {\n         dispatch(getArticleTC(response.data._id))\n      })\n   }\n}\n\n// ------------------------- Delete article -------------------------\n\nexport const delResipeTC = (id) =>{\n   return (dispatch) => {\n      delArticleAPI(id)\n      .then(() => {\n         dispatch(getArticlesTC())\n      })\n   }\n}\n\n// ------------------------- Get Category List -------------------------\nexport const getCategoryListTC = (id) =>{\n   return (dispatch) => {\n      getCategoryArticleListAPI(id)\n      .then((response) => {\n         dispatch(getCategoryListAC(response.data))\n      })\n   }\n}\n\n\n\n\nexport default articleReducer;\n","import {\n  getCategoriesAPI,\n  addCategoryAPI,\n  delCategoryAPI,\n  updateCategoryAPI,\n  getRecipeByCategoryAPI,\n  getCategoryParentsAPI,\n  getArticleByCategoryAPI\n} from \"../api/api\"\n\n\nconst GET_CATEGORIES = \"GET_CATEGORIES\"\nconst PARENTS_CATEGORY = \"PARENTS_CATEGORY\"\nconst RECIPE_BY_CATEGORY = \"RECIPE_BY_CATEGORY\"\nconst ARTICLES_BY_CATEGORY = \"ARTICLES_BY_CATEGORY\"\nconst INIT_CATEGORY_VALUE = \"INIT_CATEGORY_VALUE\"\n\nconst initialState = {\n   categories: [],\n   // edit: null,\n   recipeByCategory: [],\n   parentsCategory: [],\n   articlesCategory: [],\n   initFormCategory: {}\n}\n\nconst categoriesReducer = (state = initialState, action) => {\n\n   switch (action.type) {\n\n      case GET_CATEGORIES: return {\n         ...state,\n         categories: action.getCategories\n      }\n\n      case RECIPE_BY_CATEGORY: return {\n         ...state,\n         recipeByCategory: action.recipeByCategory\n      }\n\n      case PARENTS_CATEGORY: return {\n         ...state,\n         parentsCategory: action.parentsCategory\n      }\n\n      case ARTICLES_BY_CATEGORY: return {\n         ...state,\n         articlesCategory: action.articlesCategory\n      }\n\n      case INIT_CATEGORY_VALUE: return {\n            ...state,\n            initFormCategory: action.data\n         }\n\n      default: return state\n\n   }\n}\n\n// ------------------------- Action Creators -------------------------\n// -------------------- Get initial form of category ------------------\nexport const initFormCategoryAC = data => {\n   return ({ type: INIT_CATEGORY_VALUE, data })\n}\n\n// -------------------- Get all categories ------------------------\nexport const getCategoriesAC = (getCategories) => ({\n   type: GET_CATEGORIES,\n   getCategories\n})\n\n// -------------------- Get recipe by category ------------------------\nexport const getRecipeByCategoryAC = (recipeByCategory) => ({\n   type: RECIPE_BY_CATEGORY,\n   recipeByCategory\n})\n\n// -------------------- Get Parents Category------------------------\nexport const getCategoryParentsAC = (parentsCategory) => ({\n   type: PARENTS_CATEGORY,\n   parentsCategory\n})\n\n// -------------------- Get Article By Category ---------------------\nexport const getArticleByCategoryAC = (articlesCategory) => ({\n   type: ARTICLES_BY_CATEGORY,\n   articlesCategory\n})\n\n// ------------------------- Thunk Creators  -------------------------\n\n// ------------------------- Get all categories  -------------------------\n\nexport const getCategoriesTC = () =>{\n   return async (dispatch) => {\n      let response = await getCategoriesAPI()\n      dispatch(getCategoriesAC(response.data))\n   }\n}\n\n// ------------------------- Add category  -------------------------\nexport const addCategoryTC = (title, parentId) =>{\n   return (dispatch) => {\n      addCategoryAPI(title, parentId)\n      .then((response) => {dispatch(getCategoriesTC())})\n   }\n}\n\n// ------------------------- Delete category  -------------------------\nexport const delCategoryTC = (categoryId) =>{\n   return (dispatch) => {\n      delCategoryAPI(categoryId)\n      .then((response) => {dispatch(getCategoriesTC())})\n   }\n}\n\n// ------------------------- Update category  -------------------------\nexport const updateCategoryTC = (_id, title, parentId) => {\n  let data = JSON.stringify({_id, title, parentId: null})\n   return (dispatch) => {\n     updateCategoryAPI(data)\n     .then((response) => {dispatch(getCategoriesTC())})\n   }\n}\n\n// -------------------- Get recipe by category ------------------------\nexport const getRecipeByCategoryTC = (categoryId) =>{\n   return (dispatch) => {\n      getRecipeByCategoryAPI(categoryId)\n      .then((response) => {\n      dispatch(getRecipeByCategoryAC(response.data))})\n   }\n}\n\n// -------------------- Get Category Parents------------------------\nexport const getCategoryListTC = (categoryId) =>{\n   return (dispatch) => {\n      getCategoryParentsAPI(categoryId)\n      .then((response) => {\n      dispatch(getCategoryParentsAC(response.data))})\n   }\n}\n\n// -------------------- Get Article By Category ---------------------\nexport const getArticleByCategoryTC = (categoryId) =>{\n   return (dispatch) => {\n      getArticleByCategoryAPI(categoryId)\n      .then((response) => {\n      dispatch(getArticleByCategoryAC(response.data))})\n   }\n}\n\n// -------------------- Get Full Category Information ---------------------\n\nexport const getFullCategoryInformationTC = (categoryId) =>{\n   return (dispatch) => {\n      // getCategoryParentsAPI(categoryId)\n      // .then((response) => {dispatch(getCategoryParentsAC(response.data))})\n      // getArticleByCategoryAPI(categoryId)\n      // .then((response) => {dispatch(getArticleByCategoryAC(response.data))})\n      // getRecipeByCategoryAPI(categoryId)\n      // .then((response) => {\n      // dispatch(getRecipeByCategoryAC(response.data))})\n      dispatch(getRecipeByCategoryTC(categoryId))\n      dispatch(getCategoryListTC(categoryId))\n      dispatch(getArticleByCategoryTC(categoryId))\n\n   }\n}\n\n\n\n\n\n\n\nexport default categoriesReducer\n","import {combineReducers, createStore, applyMiddleware} from \"redux\"\nimport thunkMiddleware from \"redux-thunk\"\nimport {reducer as formReducer} from 'redux-form'\n\nimport recipesReducer from \"./recipesReducer\"\nimport recipeReducer from \"./recipeReducer\"\nimport articlesReducer from \"./articlesReducer\"\nimport articleReducer from \"./articleReducer\"\nimport categoriesReducer from './categoriesReducer'\n\nlet reducers = combineReducers({\n   recipesPage: recipesReducer,\n   recipePage: recipeReducer,\n   articlesPage: articlesReducer,\n   articlePage: articleReducer,\n   categoriesPage: categoriesReducer,\n   form: formReducer\n})\n\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware))\n\nwindow.store = store\nexport default store\n","import React from \"react\"\nimport {NavLink} from \"react-router-dom\"\nimport \"./menu.css\"\n\nconst MenuCont = () => {\n   return <div className=\"menu\">\n   <NavLink to=\"/categories\" className=\"menuItem\">Категории</NavLink>\n   <NavLink to=\"/recipes\" className=\"menuItem\">Рецепты</NavLink>\n   <NavLink to=\"/articles\" className=\"menuItem\">Статьи</NavLink>\n\n   </div>\n}\n\nexport default MenuCont\n","\nimport {NavLink} from \"react-router-dom\"\nimport \"./Categories.css\"\nimport React from \"react\"\n\nconst Categories = (props) => {\n\n   const showCategories = props.categories.map((e) => {\n      return <div key={e._id} className=\"container\">\n\n            <NavLink to={`/category/${e._id}`}>\n              <span key={e._id}>{e.title} </span>\n            </NavLink>\n              \n            </div>\n   })\n\n   return <div className=\"categories\">\n            <h2>Категории рецептов и статей</h2>\n\n            <NavLink to=\"/categories/addCateg\">Добавить категорию</NavLink>\n            <br /><br />\n            <div>{showCategories}</div>\n   </div>\n}\n\nexport default Categories\n","import React from \"react\"\nimport Categories from \"./Categories\"\nimport {connect} from \"react-redux\"\nimport {getCategoriesTC, delCategoryTC} from \"../../redux/categoriesReducer\"\nimport \"./Categories.css\"\n\nclass CategoriesContainer extends React.Component {\n\n   componentDidMount(props){\n      this.props.getCategoriesTC()\n   }\n\n   render(props){\n      return <Categories\n                categories={this.props.categoriesPage.categories}\n                delCategoryTC={(categoryId) => this.props.delCategoryTC(categoryId)}\n              />\n   }\n}\n\n\n\nlet MapStateToProps = (state) => {\n   return {\n      categoriesPage: state.categoriesPage\n   }\n}\n\nlet MapDispatchToProps = (dispatch) => {\n   return {\n      getCategoriesTC: () => {dispatch(getCategoriesTC())},\n      delCategoryTC: (categoryId) => {dispatch(delCategoryTC(categoryId))}\n   }\n}\nexport default connect(MapStateToProps, MapDispatchToProps) (CategoriesContainer)\n","import React from 'react'\nimport './formsControl.css'\n\n\nexport const Input = ({input, meta, ...props}) => {\n  return (\n     <div className={meta.touched && meta.error ? \"error\" : ' '}>\n         <input {...input} {...props} />\n         {meta.touched && meta.error && <span>  {meta.error}</span>}\n     </div>\n   )\n}\n\nexport const TextArea = ({input, meta, ...props}) => {\n  return (\n     <div className={meta.touched && meta.error ? \"error\" : ' '}>\n         <textarea cols=\"70\" rows=\"5\" {...input} {...props} />\n         {meta.touched && meta.error && <span>  {meta.error}</span>}\n     </div>\n   )\n}\n\nexport const Select = ({input, meta, ...props}) => {\n   return (\n      <div>\n         <select {...input} {...props} />\n      </div>\n   )\n}\n","export const required = value => {\n    if (value) return undefined;\n    return \"Это поле обязательное\";\n}\n\nexport const minTitle = value => {\n  if(value && value.length < 3) return \"Это поле не может быть меньше 3-х символов\"\n  return undefined\n}\n\n\nexport const minText = value => {\n  if(value && value.length < 10) return \"Это поле не может быть меньше 10-ти символов\"\n  return undefined\n}\n","import React, {useState}  from \"react\"\nimport {Field, reduxForm} from 'redux-form'\nimport {Redirect} from 'react-router-dom'\nimport {Input, Select} from './../FormsControl/FormsControl'\nimport \"./Categories.css\"\nimport {required, minTitle} from \"./../../Validators/Validators\"\n\nconst AddCategoriesForm = (props) => {\n\n   let showCategories = props.categoriesPage.categories.map((e) => {\n      return <option key={e._id} value={e._id}>{e.title}</option>\n   })\n\n   return <form onSubmit={props.handleSubmit} className=\"categories\">\n\n      <div>\n         <div><b>Название категории</b></div>\n         <Field\n           name=\"title\"\n           type=\"text\"\n           placeholder=\"Название категории\"\n           component={Input}\n           validate={[required, minTitle]}\n           /><br />\n\n           <div><b>Выберите родительскую категорию</b></div>\n              <Field name=\"parentId\" component={Select}>\n                 <option>Без категории</option>\n                 {showCategories}\n               </Field>\n      </div>\n\n      <button>Добавить</button>\n   </form>\n}\n\n\nconst ReduxAddCategoriesForm = reduxForm ({form: \"addCategories\"}) (AddCategoriesForm)\n\n\nconst AddCategories = (props) => {\n\n   let [addDone, setEditMode] = useState(false)\n\n   const onSubmit = (formData) =>{\n      props.addCategoryTC(formData.title, formData.parentId)\n      setEditMode(true)\n   }\n\n   if(addDone) return <Redirect to={\"/categories\"} />\n   else\n   return <ReduxAddCategoriesForm\n               onSubmit={onSubmit}\n               categoriesPage={props.categoriesPage}\n            />\n}\n\nexport default AddCategories\n","import React from \"react\"\nimport AddCategories from \"./AddCategories\"\nimport {addCategoryTC} from \"../../redux/categoriesReducer\"\nimport {connect} from \"react-redux\"\n\nconst AddCategoriesContainer = (props) => {\n   return <AddCategories\n               addCategoryTC={props.addCategoryTC}\n               categoriesPage={props.categoriesPage}\n         />\n}\n\nlet MapStateToProps = (state) => {\n   return {\n      categoriesPage: state.categoriesPage\n   }\n}\n\nlet MapDispatchToProps = (dispatch) => {\n   return {\n      addCategoryTC: (title, parentId) => {dispatch(addCategoryTC(title, parentId))}\n   }\n}\n\nexport default connect(MapStateToProps, MapDispatchToProps) (AddCategoriesContainer)\n","// import React from \"react\"\nimport {Field, reduxForm} from 'redux-form'\nimport {Input} from './../FormsControl/FormsControl'\nimport \"./Categories.css\"\nimport React from 'react'\nimport {required, minTitle} from \"./../../Validators/Validators\"\n\nconst CategoryEditForm = (props) => {\n   return <form onSubmit={props.handleSubmit} className=\"categories\">\n\n      <div><b>Название категории</b></div>\n         <Field\n            name=\"title\"\n            type=\"text\"\n            component={Input}\n            validate={[required, minTitle]}>\n         </Field>\n         <br />\n\n      <button>Сохранить изменения</button>\n   </form>\n}\n\n\nexport default reduxForm ({form: \"editCategories\"}) (CategoryEditForm)\n","import React, {useState} from \"react\"\nimport {Redirect} from 'react-router-dom'\nimport CategoryEditForm from \"./CategoryEditForm\"\nimport {NavLink} from \"react-router-dom\"\nimport \"./Categories.css\"\n\n\nconst Category = (props) => {\n\n   let parents = props.parentsCategory.map((c) => {\n      return (\n         <NavLink  key={c._id} to={`/category/${c._id}`}> / {c.title}</NavLink>\n      )\n   })\n\n   let recipes = props.recipeByCategory.map((c) => {\n      return (\n         <NavLink  key={c._id} to={`/recipe/${c._id}`}> / {c.title}</NavLink>\n      )\n   })\n\n   let articles = props.articlesCategory.map((c) => {\n      return (\n         <NavLink  key={c._id} to={`/article/${c._id}`}> / {c.title}</NavLink>\n      )\n   })\n\n   let [status, setStatus] = useState(true)\n   const delCat = (categoryId) => {\n      props.delCategoryTC(categoryId)\n      setStatus(false)\n   }\n\n   let [editMode, setEditMode] = useState(false)\n\n   const editCat = (id, title) => {\n      // props.updateCategoryTC()\n      props.initFormCategoryAC({\n         title: props.title\n      })\n\n      setEditMode(true)\n   }\n\n   const onSubmit = (formData) =>{\n      props.updateCategoryTC(props.id, formData.title)\n      setStatus(false)\n   }\n\nif(!status)return <Redirect to={\"/categories\"} />\nif(editMode)return <CategoryEditForm\n                     initialValues={props.initFormCategory}\n                     onSubmit={onSubmit}\n                     />\nelse\n   return <div className=\"category\">\n           {}\n           <div><b>Название категории:</b></div>\n           <div>{props.title}</div><br />\n           <div><b>Родительские категории:</b></div>\n           <div>{parents}</div><br />\n           <div><b>Дата последнего изменения:</b></div>\n           <div>{props.updatedAt}</div><br />\n           <div><b>Рецепты данной категории:</b></div>\n           <div>{recipes}</div><br />\n           <div><b>Статьи данной категории:</b></div>\n           <div>{articles}</div>\n\n           <button onClick={() => editCat(props.id, props.title)}>Редактировать</button>\n           <button onClick={() => delCat(props.id)}>Удалить</button>\n   </div>\n}\n\n\nexport default Category\n","import React from \"react\"\nimport Category from \"./Category\"\nimport {connect} from \"react-redux\"\nimport {withRouter} from 'react-router-dom'\nimport {\n   getCategoriesTC,\n   updateCategoryTC,\n   delCategoryTC,\n   getRecipeByCategoryTC,\n   getFullCategoryInformationTC,\n   initFormCategoryAC\n} from \"../../redux/categoriesReducer\"\n\nclass CategoryContainer extends React.Component {\n\n  constructor(props) {\n     super(props)\n     this.state = {category: {}\n     }\n  }\n\n   findInfoCategory = (props) => {\n      const category = this.props.categories.filter(c => {\n         return c._id === this.props.match.params.idCat\n      })\n      this.setState({category: category[0]})\n   }\n\nasync componentDidMount(props){\n   await this.props.getCategoriesTC()\n      this.findInfoCategory()\n      this.props.getFullCategoryInformationTC(this.props.match.params.idCat)\n   }\n\n   // componentDidUpdate(prevProps, prevState, snapshot){\n   //    if (this.props.initFormCategory.title && this.props.initFormCategory.title !== this.state.category.title)\n   //\n   //    this.findInfoCategory()\n   //    console.log(\"initFormCategory:\", this.props.initFormCategory.title)\n   //    console.log(\"this.state:\", this.state.category.title)\n   // }\n\n   render(props) {\n      return <Category\n               id={this.state.category._id}\n               title={this.state.category.title}\n               parentId={this.state.category.parentId}\n               updatedAt={this.state.category.updatedAt}\n               delCategoryTC={this.props.delCategoryTC}\n               updateCategoryTC={this.props.updateCategoryTC}\n               recipeByCategory={this.props.recipeByCategory}\n               parentsCategory={this.props.parentsCategory}\n               articlesCategory={this.props.articlesCategory}\n               initFormCategory={this.props.initFormCategory}\n               initFormCategoryAC={this.props.initFormCategoryAC}\n               />\n   }\n}\n\nconst WithUrlCategoryContainer = withRouter(CategoryContainer)\n\nlet MapStateToProps = (state) => {\n   return {\n      categories: state.categoriesPage.categories,\n      recipeByCategory: state.categoriesPage.recipeByCategory,\n      parentsCategory: state.categoriesPage.parentsCategory,\n      articlesCategory: state.categoriesPage.articlesCategory,\n      initFormCategory: state.categoriesPage.initFormCategory\n   }\n}\n\nlet MapDispatchToProps = (dispatch) => {\n   return {\n   getCategoriesTC: () => dispatch(getCategoriesTC()),\n   delCategoryTC: (categoryId) => dispatch(delCategoryTC(categoryId)),\n   updateCategoryTC: (id, title) => dispatch(updateCategoryTC(id, title)),\n   getRecipeByCategoryTC: (id) => dispatch(getRecipeByCategoryTC(id)),\n   getFullCategoryInformationTC: (id) => dispatch(getFullCategoryInformationTC(id)),\n   initFormCategoryAC: (data) => dispatch(initFormCategoryAC(data))\n   }\n}\nexport default connect(MapStateToProps, MapDispatchToProps) (WithUrlCategoryContainer)\n","import React from \"react\"\nimport \"./Recipes.css\"\nimport {NavLink} from \"react-router-dom\"\n// import Recipe from \"./Recipe\"\n\nconst Recipes = (props) => {\n\n   let showRecipes = props.recipes.map((e) => {\n      return (\n         <NavLink  key={e._id} to={`/recipe/${e._id}`}>\n            <div className=\"recipe\" >\n               <div>\n                  <h2>{e.title}</h2>\n               </div>\n               <p>\n                  {e.text}\n               </p>\n               <div>\n               {e.updatedAt}\n               </div>\n            </div>\n         </NavLink>\n      )\n   })\n\n   return (<div className=\"recipes\"><h1>Рецепты</h1>\n\n      <NavLink to=\"/recipes/addRecipe\">Добавить рецепт</NavLink><br />\n      <div>{showRecipes}\n      </div>\n\n\n      </div>)\n}\n\nexport default Recipes\n","import React from \"react\"\nimport {connect} from \"react-redux\"\nimport Recipes from \"./Recipes\"\nimport {getRecipesTC} from \"./../../redux/recipesReducer\"\n\n//const RecipesContainer = (props) => {\n//   return <Recipes getRecipesTC={getRecipesTC} recipes={props.recipes}/>\n//}\n\nclass RecipesContainer extends React.Component {\n\n   componentDidMount(props){\n      this.props.getRecipesTC()\n   }\n\n   render (){\n      return <Recipes recipes={this.props.recipesPage.recipes} />\n   }\n}\n\nlet MapStateToProps = (state) => {\n   return {\n      recipesPage: state.recipesPage\n   }\n}\n\nlet MapDispatchToProps = (dispatch) => {\n   return {\n      getRecipesTC: () => {dispatch(getRecipesTC())}\n   }\n}\nexport default connect(MapStateToProps, MapDispatchToProps) (RecipesContainer)\n","import React, {useState} from \"react\"\nimport {Field, reduxForm} from \"redux-form\"\nimport {Redirect} from \"react-router-dom\"\nimport {Input, TextArea, Select} from './../FormsControl/FormsControl'\nimport \"./Recipes.css\"\nimport {required, minTitle} from \"./../../Validators/Validators\"\n\nconst AddRecipeForm = (props) => {\n\n   let showCategories = props.categoriesPage.categories.map((e) => {\n      return <option key={e._id} value={e._id}>{e.title}</option>\n   })\n\n   return <form onSubmit={props.handleSubmit} className=\"recipe\">\n\n      <div>Название рецепта\n         <Field\n           name=\"title\"\n           type=\"text\"\n           placeholder=\"Название рецепта\"\n           component={Input}\n           validate={[required, minTitle]}\n           />\n      </div>\n\n      <div>Текст рецепта\n         <Field\n           name=\"text\"\n           type=\"text\"\n           placeholder=\"Текст рецепта\"\n           component={TextArea}\n           validate={[required, minTitle]}\n           />\n      </div>\n\n      <div>\n      <div><b>Выберите категорию</b></div>\n         <Field name=\"categoryId\" component={Select}>\n            <option>Без категории</option>\n            {showCategories}\n          </Field>\n      </div>\n\n      <button>Добавить</button>\n   </form>\n}\n\nconst ReduxAddRecipeForm = reduxForm ({form: \"addRecipe\"}) (AddRecipeForm)\n\nconst AddRecipe = (props) => {\n\n   let [addDone, setEditMode] = useState(false)\n\n   const onSubmit = (formData) =>{\n      props.setRecipeTC(formData.title, formData.text, formData.categoryId)\n      setEditMode(true)\n   }\n\n   if(addDone) return <Redirect to={\"/recipes\"} />\n   else\n   return <ReduxAddRecipeForm onSubmit={onSubmit} categoriesPage={props.categoriesPage}/>\n}\n\nexport default AddRecipe\n","import React from \"react\"\nimport AddRecipe from \"./AddRecipe\"\nimport {setRecipeTC} from \"../../redux/recipesReducer\"\nimport {connect} from \"react-redux\"\n\nconst AddRecipeContainer = (props) => {\n   return <AddRecipe \n            setRecipeTC={props.setRecipeTC} \n            categoriesPage={props.categoriesPage}\n            editFormRecipePage={props.editFormRecipePage}\n            />\n}\n\nlet MapStateToProps = (state) => {\n   return {\n      categoriesPage: state.categoriesPage\n   }\n}\n\nlet MapDispatchToProps = (dispatch) => {\n   return {\n      setRecipeTC: (title, text, categoryId) => {dispatch(setRecipeTC(title, text, categoryId))}\n   }\n}\n\nexport default connect(MapStateToProps, MapDispatchToProps) (AddRecipeContainer)\n","import {Field, reduxForm} from 'redux-form'\nimport {Input, TextArea} from './../FormsControl/FormsControl'\nimport React from \"react\"\nimport {required, minTitle} from \"./../../Validators/Validators\"\n\nconst RecipeForm = (props) => {\n\n   return ( <form onSubmit={props.handleSubmit} className=\"recipe\">\n      {/*<div>Название рецепта</div>\n      <Field\n        name=\"title\"\n        type=\"text\"\n        component=\"TextArea\">{props.title}\n      </Field>\n\n      <div>Текст рецепта</div>\n      <Field\n        name=\"text\"\n        type=\"text\"\n        component=\"TextArea\">{props.text}\n      </Field><br />*/}\n\n\n      <div>Название рецепта</div>\n      <Field\n        name=\"title\"\n        type=\"text\"\n        component={Input}\n        validate={[required, minTitle]}>\n      </Field>\n\n      <div>Текст рецепта</div>\n      <Field\n        name=\"text\"\n        type=\"text\"\n        component={TextArea}\n        validate={required}>\n      </Field><br />\n\n      <button type=\"submit\">Сохранить изменения</button>\n   </form>\n   )\n}\n\nexport default reduxForm ({form: \"editRecipe\"}) (RecipeForm)\n","import React, {useState} from 'react'\nimport {Redirect} from 'react-router-dom'\nimport \"./Recipes.css\"\nimport {NavLink} from \"react-router-dom\"\nimport RecipeEditForm from \"./RecipeEditForm\"\n\nconst Recipe = (props) => {\n   let category = props.categoryList.map((c) => {\n      return <NavLink  key={c._id} to={`/category/${c._id}`}> / {c.title}</NavLink>\n   })\n\n   const onSubmit = (formData) =>{\n\n      let createObj = {\n         _id: props.id,\n         title: formData.title || props.title,\n         text: formData.text || props.text,\n         categoryId: props.categoryId\n      }\n\n      props.updateRecipeTC(createObj)\n      setEditMode(false)\n   }\n\n   let [editMode, setEditMode] = useState(false)\n\n   const modeEdit = () =>{\n      props.loadAC({\n         title: props.title,\n         text: props.text\n      })\n      setEditMode(true)\n    }\n\n    let [status, setStatus] = useState(true)\n    const statusEdit = () =>{\n       setStatus(false)\n    }\n\n\n   const statusDelete = () => {\n      props.delResipeTC(props.id)\n      statusEdit()\n   }\n\n   if(!status)return <Redirect to={\"/recipes\"} />\n   return (<>\n      {editMode ?\n         <RecipeEditForm\n            id={props.id}\n            title={props.title}\n            text={props.text}\n            date={props.date}\n            onSubmit={onSubmit}\n            initialValues={props.initFormRecipe}\n         /> :\n         <div className=\"recipe\">\n         <h2>{props.title}</h2>\n         <div>{props.text}</div>\n         <br />\n         <div><b>Категории к которым относится рецепт</b></div>\n         <div>{category}</div><br />\n         <div><b>Дата последнего изменения</b></div>\n         <div>{props.date}</div>\n\n         <button onClick={modeEdit}>Редактировать</button>\n         <button onClick={statusDelete}>Удалить</button>\n         </div>\n      }</>)\n\n}\n\nexport default Recipe\n","import React from \"react\"\nimport Recipe from \"./Recipe\"\nimport {\n   getRecipeTC,\n   updateRecipeTC,\n   delResipeTC,\n   getCategoryListTC,\n   loadAC\n} from \"./../../redux/recipeReducer\"\nimport {withRouter} from 'react-router-dom'\nimport {connect} from 'react-redux'\n\nclass RecipeContainer extends React.Component {\n\n   refreshRecipe(){\n      this.props.getRecipeTC(this.props.match.params.recipeId)\n      this.props.getCategoryListTC(this.props.match.params.recipeId)\n   }\n\n   componentDidMount(){\n      this.refreshRecipe()\n\n   }\n\n   componentDidUpdate (prevProps, prevState, snapshot){\n      if(!this.props.categoryList)\n      this.refreshRecipe()\n   }\n\n   render(){\n      return <Recipe\n               id={this.props.match.params.recipeId}\n               title={this.props.title}\n               text={this.props.text}\n               categoryId={this.props.categoryId}\n               date={this.props.date}\n               updateRecipeTC={(obj) => this.props.updateRecipeTC(obj)}\n               delResipeTC={(id) => this.props.delResipeTC(id)}\n               categoryList={this.props.categoryList}\n               initFormRecipe={this.props.initFormRecipe}\n               loadAC={this.props.loadAC}               \n               />\n   }\n}\n\n\n\nlet MapStateToProps = (state) => {\n   return ({\n      title: state.recipePage.recipe.title,\n      text: state.recipePage.recipe.text,\n      categoryId: state.recipePage.recipe.categoryId,\n      date: state.recipePage.recipe.updatedAt,\n      categoryList: state.recipePage.categoryList,\n      initFormRecipe: state.recipePage.initFormRecipe\n   })}\n\nlet MapDispatchToProps = (dispatch) => {\n   return ({\n      getRecipeTC: (id) => {dispatch(getRecipeTC(id))},\n      updateRecipeTC: (obj) => {dispatch(updateRecipeTC(obj))},\n      delResipeTC: (id) => {dispatch(delResipeTC(id))},\n      getCategoryListTC: (id) => {dispatch(getCategoryListTC(id))},\n      loadAC: (data) => {dispatch(loadAC(data))}\n   })\n}\n\nconst WithUrlRecipe = withRouter(RecipeContainer)\n\nexport default connect(MapStateToProps, MapDispatchToProps)(WithUrlRecipe)\n","import React from \"react\"\nimport \"./Articles.css\"\nimport {NavLink} from \"react-router-dom\"\n\nconst Articles = (props) => {\n\n   let showArticles = props.articles.map((e) => {\n      return (\n         <NavLink  key={e._id} to={`/article/${e._id}`}>\n            <div className=\"article\" >\n               <div>\n                  <h2>{e.title}</h2>\n               </div>\n               <p>\n                  {e.description}\n               </p>\n               <div>\n               {e.updatedAt}\n               </div>\n            </div>\n         </NavLink>\n      )\n   })\n\n   return (<div className=\"articles\"><h1>Статьи</h1>\n\n      <NavLink to=\"/articles/addArticle\">Добавить статью</NavLink><br />\n      <div>{showArticles}\n      </div>\n\n\n      </div>)\n}\n\nexport default Articles\n","import React from \"react\"\nimport {connect} from \"react-redux\"\nimport Articles from \"./Articles\"\nimport {getArticlesTC} from \"./../../redux/articlesReducer\"\n\n\nclass ArticlesContainer extends React.Component {\n\n   componentDidMount(props){\n      this.props.getArticlesTC()\n   }\n\n   render (){\n      return <Articles articles={this.props.articlesPage.articles} />\n   }\n}\n\nlet MapStateToProps = (state) => {\n   return {\n      articlesPage: state.articlesPage\n   }\n}\n\nlet MapDispatchToProps = (dispatch) => {\n   return {\n      getArticlesTC: () => {dispatch(getArticlesTC())}\n   }\n}\nexport default connect(MapStateToProps, MapDispatchToProps) (ArticlesContainer)\n","import React, {useState} from \"react\"\nimport {Field, reduxForm} from 'redux-form'\nimport {Input, TextArea, Select} from './../FormsControl/FormsControl'\nimport \"./Articles.css\"\nimport {Redirect} from \"react-router-dom\"\nimport {required, minTitle, minText} from \"./../../Validators/Validators\"\n\nconst AddArticleForm = (props) => {\n\n   let showCategories = props.categoriesPage.categories.map((e) => {\n      return <option key={e._id} value={e._id}>{e.title}</option>\n   })\n\n   return <form onSubmit={props.handleSubmit} className=\"article\">\n      <div>Название статьи\n         <Field\n           name=\"title\"\n           type=\"text\"\n           placeholder=\"Название статьи\"\n           component={Input}\n           validate={[required, minTitle]}\n           />\n      </div>\n\n      <div>Краткое описание\n         <Field\n           name=\"description\"\n           type=\"text\"\n           placeholder=\"Краткое описание\"\n           component={TextArea}\n           validate={[required, minText]}\n           />\n      </div>\n\n      <div>Текст статьи\n         <Field\n           name=\"text\"\n           type=\"text\"\n           placeholder=\"Текст статьи\"\n           component={TextArea}\n           validate={[required, minText]}\n           />\n      </div>\n\n      <div>\n      <div><b>Выберите категорию</b></div>\n         <Field name=\"categoryId\" component={Select}>\n            <option>Без категории</option>\n            {showCategories}\n          </Field>\n      </div>\n\n\n\n      <button>Добавить</button>\n   </form>\n}\n\nconst ReduxAddArticleForm = reduxForm ({form: \"addArticle\"}) (AddArticleForm)\n\nconst AddArticle = (props) => {\n\n   let [addDone, setEditMode] = useState(false)\n\n   const onSubmit = (formData) =>{\n      props.setArticleTC(formData.title, formData.description, formData.text, formData.categoryId)\n      setEditMode(true)\n   }\n\n   if(addDone) return <Redirect to={\"/articles\"} />\n   else\n   return <ReduxAddArticleForm onSubmit={onSubmit} categoriesPage={props.categoriesPage}/>\n}\n\nexport default AddArticle\n","import React from \"react\"\nimport AddArticle from \"./AddArticle\"\nimport {setArticleTC} from \"../../redux/articlesReducer\"\nimport {connect} from \"react-redux\"\n\nconst AddArticleContainer = (props) => {\n   return <AddArticle setArticleTC={props.setArticleTC} categoriesPage={props.categoriesPage}/>\n}\n\nlet MapStateToProps = (state) => {\n   return {\n      categoriesPage: state.categoriesPage\n   }\n}\n\nlet MapDispatchToProps = (dispatch) => {\n   return {\n      setArticleTC: (title, description,text, categoryId) => {\n         dispatch(setArticleTC(title, description, text, categoryId))}\n   }\n}\n\nexport default connect(MapStateToProps, MapDispatchToProps) (AddArticleContainer)\n","import React from \"react\"\nimport {Field, reduxForm} from 'redux-form'\nimport {Input, TextArea} from './../FormsControl/FormsControl'\nimport {required, minTitle} from \"./../../Validators/Validators\"\n\nconst ArticleForm = (props) => {\n\n   return ( <><form onSubmit={props.handleSubmit} className=\"article\">\n      <div>Название статьи</div>\n         <Field\n           name=\"title\"\n           type=\"text\"\n           component={Input}\n           validate={[required, minTitle]}>\n         </Field>\n\n         <div>Описание статьи</div>\n            <Field\n              name=\"description\"\n              type=\"text\"\n              component={TextArea}\n              validate={required}>\n            </Field>\n\n      <div>Статья</div>\n         <Field\n           name=\"text\"\n           type=\"text\"\n           component={TextArea}\n           validate={required}>\n         </Field><br />\n\n      <button>Сохранить изменения</button>\n   </form>\n   </>)\n\n}\n\n\nexport default reduxForm ({form: \"editArticle\"}) (ArticleForm)\n","import React, {useState} from 'react'\nimport {Redirect} from 'react-router-dom'\nimport \"./Articles.css\"\nimport {NavLink} from \"react-router-dom\"\nimport ArticleEditForm from \"./ArticleEditForm\"\n\nconst Article = (props) => {\n\n   let category = props.categoryList.map((c) => {\n      return <NavLink  key={c._id} to={`/category/${c._id}`}> / {c.title}</NavLink>\n   })\n\n\n   const onSubmit = (formData) =>{\n\n      let createObj = {\n         _id: props.id,\n         title: formData.title || props.title,\n         description: formData.description || props.description,\n         text: formData.text || props.text,\n         categoryId: props.categoryId\n      }\n\n      props.updateArticleTC(createObj)\n      setEditMode(false)\n   }\n\n   let [editMode, setEditMode] = useState(false)\n\n    const modeEdit = () =>{\n\n      props.initFormArticleAC({\n         title: props.title,\n         description: props.description,\n         text: props.text\n      })\n\n       setEditMode(true)\n\n    }\n\n    let [status, setStatus] = useState(true)\n    const statusEdit = () =>{\n       setStatus(false)\n    }\n\n\n   const statusDelete = () => {\n      props.delResipeTC(props.id)\n      statusEdit()\n   }\n\n   if(!status)return <Redirect to={\"/articles\"} />\n   return (<>\n      {editMode ?\n         <ArticleEditForm\n            onSubmit={onSubmit}\n            initialValues={props.initFormArticle}\n         /> :\n         <div className=\"article\">\n         <h2>{props.title}</h2>\n         <div><b>Описание статьи</b></div>\n         <div>{props.description}</div><br />\n         <div><b>Статья</b></div>\n         <div>{props.text}</div>\n         <br />\n         <div><b>Категории к которым относится рецепт</b></div>\n         <div>{category}</div><br />\n         <div><b>Дата последнего изменения</b></div>\n         <div>{props.date}</div>\n\n         <button onClick={modeEdit}>Редактировать</button>\n         <button onClick={statusDelete}>Удалить</button>\n         </div>\n      }</>)\n\n}\n\nexport default Article\n","import React from \"react\"\nimport Article from \"./Article\"\nimport {\n   getArticleTC,\n   updateArticleTC,\n   delResipeTC,\n   getCategoryListTC,\n   initFormArticleAC\n} from \"./../../redux/articleReducer\"\nimport {withRouter} from 'react-router-dom'\nimport {connect} from 'react-redux'\n\nclass ArticleContainer extends React.Component {\n\n   refreshArticle(){\n      this.props.getArticleTC(this.props.match.params.articleId)\n      this.props.getCategoryListTC(this.props.match.params.articleId)\n   }\n\n   componentDidMount(){\n      this.refreshArticle()\n\n   }\n\n   componentDidUpdate (prevProps, prevState, snapshot){\n      if(!this.props.categoryList)\n      this.refreshArticle()\n   }\n\n   render(){\n      return <Article\n               id={this.props.match.params.articleId}\n               title={this.props.title}\n               description={this.props.description}\n               text={this.props.text}\n               categoryId={this.props.categoryId}\n               date={this.props.date}\n               updateArticleTC={(obj) => this.props.updateArticleTC(obj)}\n               delResipeTC={(id) => this.props.delResipeTC(id)}\n               categoryList={this.props.categoryList}               \n               initFormArticle={this.props.initFormArticle}\n               initFormArticleAC={this.props.initFormArticleAC}\n               />\n   }\n}\n\n\n\nlet MapStateToProps = (state) => {\n   return ({\n      title: state.articlePage.article.title,\n      description: state.articlePage.article.description,\n      text: state.articlePage.article.text,\n      categoryId: state.articlePage.article.categoryId,\n      date: state.articlePage.article.updatedAt,\n      categoryList: state.articlePage.categoryList,\n      initFormArticle: state.articlePage.initFormArticle\n   })}\n\nlet MapDispatchToProps = (dispatch) => {\n   return ({\n      getArticleTC: (id) => {dispatch(getArticleTC(id))},\n      updateArticleTC: (obj) => {dispatch(updateArticleTC(obj))},\n      delResipeTC: (id) => {dispatch(delResipeTC(id))},\n      getCategoryListTC: (id) => {dispatch(getCategoryListTC(id))},\n      initFormArticleAC: (data) => {dispatch(initFormArticleAC(data))}\n   })\n}\n\nconst WithUrlArticle = withRouter(ArticleContainer)\n\nexport default connect(MapStateToProps, MapDispatchToProps)(WithUrlArticle)\n","import React from 'react';\nimport {Provider} from \"react-redux\"\nimport {connect} from \"react-redux\"\nimport store from \"./redux/reduxStore.js\"\nimport './App.css';\nimport {BrowserRouter, Route, withRouter} from \"react-router-dom\"\nimport MenuCont from \"./Components/Menu/MenuCont\"\nimport CategoriesContainer from \"./Components/Categories/CategoriesContainer\"\nimport AddCategoriesContainer from \"./Components/Categories/AddCategoreisContainer\"\nimport CategoryContainer from \"./Components/Categories/CategoryContainer\"\nimport RecipesContainer from \"./Components/Recipes/RecipesContainer\"\nimport AddRecipeContainer from './Components/Recipes/AddRecipeContainer'\nimport RecipeContainer from \"./Components/Recipes/RecipeContainer\"\nimport {getCategoriesTC} from \"./redux/categoriesReducer\"\n\nimport ArticlesContainer from \"./Components/Articles/ArticlesContainer\"\nimport AddArticleContainer from './Components/Articles/AddArticleContainer'\nimport ArticleContainer from \"./Components/Articles/ArticleContainer\"\n\nfunction App(props) {\n   return (\n\n         <div className=\"App\">\n            <MenuCont />\n            <div>\n\n               <Route\n                  exact path=\"/\"\n                  render={() => <CategoriesContainer/>\n                  }\n               />\n\n               <Route\n                  path=\"/categories/addCateg\"\n                  render={() => <AddCategoriesContainer />\n                  }\n               />\n\n               <Route\n                  path=\"/category/:idCat\"\n                  render={() => <CategoryContainer />\n                  }\n               />\n\n               <Route\n                  path=\"/categories\"\n                  render={() => <CategoriesContainer/>\n                  }\n               />\n\n               <Route\n                  path=\"/recipes/addRecipe\"\n                  render={() => <AddRecipeContainer />\n                  }\n               />\n\n               <Route\n                  path=\"/recipes\"\n                  render={() => <RecipesContainer />\n                  }\n               />\n\n               <Route\n                  path=\"/recipe/:recipeId\"\n                  render={() => <RecipeContainer />\n                  }\n               />\n\n               <Route\n                  path=\"/articles/addArticle\"\n                  render={() => <AddArticleContainer />\n                  }\n               />\n\n               <Route\n                  path=\"/articles\"\n                  render={() => <ArticlesContainer />\n                  }\n               />\n\n               <Route\n                  path=\"/article/:articleId\"\n                  render={() => <ArticleContainer />\n                  }\n               />\n            </div>\n         </div>\n\n   );\n}\n\n\nclass AppContainer extends React.Component{\n\n   componentDidMount(props){\n      this.props.getCategoriesTC()\n   }\n\n   render(){\n      return <App />\n   }\n}\n\nlet MapDispatchToProps = (dispatch) => {\n   return {\n      getCategoriesTC: () => dispatch(getCategoriesTC())\n   }\n}\n\nconst AppConnect = withRouter (connect(null, MapDispatchToProps)(AppContainer))\n\nconst AdminPanel = () => {\n   return (\n      <BrowserRouter>\n         <Provider store={store}>\n            <AppConnect />\n         </Provider>\n      </BrowserRouter>\n   )\n}\n\nexport default AdminPanel\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}